// Mocks generated by Mockito 5.4.6 from annotations
// in workshop_booking_system/test/presentation/screens/booking/booking_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:workshop_booking_system/domain/entities/booking.dart' as _i3;
import 'package:workshop_booking_system/domain/entities/payment_info.dart'
    as _i6;
import 'package:workshop_booking_system/domain/entities/time_slot.dart' as _i4;
import 'package:workshop_booking_system/domain/entities/user.dart' as _i9;
import 'package:workshop_booking_system/presentation/providers/auth_provider.dart'
    as _i8;
import 'package:workshop_booking_system/presentation/providers/booking_provider.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingProvider extends _i1.Mock implements _i2.BookingProvider {
  MockBookingProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Booking> get bookings =>
      (super.noSuchMethod(
            Invocation.getter(#bookings),
            returnValue: <_i3.Booking>[],
          )
          as List<_i3.Booking>);

  @override
  List<_i3.Booking> get allBookings =>
      (super.noSuchMethod(
            Invocation.getter(#allBookings),
            returnValue: <_i3.Booking>[],
          )
          as List<_i3.Booking>);

  @override
  List<_i4.TimeSlot> get availableTimeSlots =>
      (super.noSuchMethod(
            Invocation.getter(#availableTimeSlots),
            returnValue: <_i4.TimeSlot>[],
          )
          as List<_i4.TimeSlot>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isProcessingPayment =>
      (super.noSuchMethod(
            Invocation.getter(#isProcessingPayment),
            returnValue: false,
          )
          as bool);

  @override
  bool get isCreatingBooking =>
      (super.noSuchMethod(
            Invocation.getter(#isCreatingBooking),
            returnValue: false,
          )
          as bool);

  @override
  bool get isCancellingBooking =>
      (super.noSuchMethod(
            Invocation.getter(#isCancellingBooking),
            returnValue: false,
          )
          as bool);

  @override
  _i2.BookingStep get currentStep =>
      (super.noSuchMethod(
            Invocation.getter(#currentStep),
            returnValue: _i2.BookingStep.selectTimeSlot,
          )
          as _i2.BookingStep);

  @override
  double get totalAmount =>
      (super.noSuchMethod(Invocation.getter(#totalAmount), returnValue: 0.0)
          as double);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);

  @override
  bool get hasBookings =>
      (super.noSuchMethod(Invocation.getter(#hasBookings), returnValue: false)
          as bool);

  @override
  List<_i3.Booking> get upcomingBookings =>
      (super.noSuchMethod(
            Invocation.getter(#upcomingBookings),
            returnValue: <_i3.Booking>[],
          )
          as List<_i3.Booking>);

  @override
  List<_i3.Booking> get completedBookings =>
      (super.noSuchMethod(
            Invocation.getter(#completedBookings),
            returnValue: <_i3.Booking>[],
          )
          as List<_i3.Booking>);

  @override
  List<_i3.Booking> get cancelledBookings =>
      (super.noSuchMethod(
            Invocation.getter(#cancelledBookings),
            returnValue: <_i3.Booking>[],
          )
          as List<_i3.Booking>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadBookings(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#loadBookings, [userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> refreshBookings(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#refreshBookings, [userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void startBookingProcess(String? workshopId) => super.noSuchMethod(
    Invocation.method(#startBookingProcess, [workshopId]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadAvailableTimeSlots(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadAvailableTimeSlots, [startDate, endDate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void selectTimeSlot(_i4.TimeSlot? timeSlot, double? workshopPrice) =>
      super.noSuchMethod(
        Invocation.method(#selectTimeSlot, [timeSlot, workshopPrice]),
        returnValueForMissingStub: null,
      );

  @override
  void proceedToPayment() => super.noSuchMethod(
    Invocation.method(#proceedToPayment, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<bool> createBookingWithPayment({
    required String? userId,
    required _i6.PaymentMethod? paymentMethod,
    String? specialRequests,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createBookingWithPayment, [], {
              #userId: userId,
              #paymentMethod: paymentMethod,
              #specialRequests: specialRequests,
            }),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> cancelBooking(String? bookingId, String? reason) =>
      (super.noSuchMethod(
            Invocation.method(#cancelBooking, [bookingId, reason]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i3.Booking?> getBookingById(String? bookingId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookingById, [bookingId]),
            returnValue: _i5.Future<_i3.Booking?>.value(),
          )
          as _i5.Future<_i3.Booking?>);

  @override
  bool canCancelBooking(_i3.Booking? booking) =>
      (super.noSuchMethod(
            Invocation.method(#canCancelBooking, [booking]),
            returnValue: false,
          )
          as bool);

  @override
  void resetBookingProcess() => super.noSuchMethod(
    Invocation.method(#resetBookingProcess, []),
    returnValueForMissingStub: null,
  );

  @override
  void goBackStep() => super.noSuchMethod(
    Invocation.method(#goBackStep, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i8.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAdmin =>
      (super.noSuchMethod(Invocation.getter(#isAdmin), returnValue: false)
          as bool);

  @override
  bool get isUser =>
      (super.noSuchMethod(Invocation.getter(#isUser), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<bool> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> signUp(String? email, String? password, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [email, password, name]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [email]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateProfile(_i9.User? updatedUser) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [updatedUser]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  bool hasAdminPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasAdminPermission, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canPerformAdminAction() =>
      (super.noSuchMethod(
            Invocation.method(#canPerformAdminAction, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canAccessUserFeatures() =>
      (super.noSuchMethod(
            Invocation.method(#canAccessUserFeatures, []),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<void> refreshUser() =>
      (super.noSuchMethod(
            Invocation.method(#refreshUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
